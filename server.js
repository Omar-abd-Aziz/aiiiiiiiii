






const express = require('express');
const ai = require('./index'); // Adjust as needed
const app = express();
const cors = require('cors');
const models = [
  "gpt-4o-mini",
  "gpt-4-turbo-2024-04-09",
  "claude-3-5-sonnet-20240620",
  "grok-2",
  "claude-3-sonnet-20240229",
  "grok-2-mini",
  "claude-3-opus-20240229",
  "gpt-4o-2024-08-06",
  "gemini-1.5-flash-exp-0827",
  "claude-2.1",
  "gpt-4o-free",
  "gemini-1.5-pro-exp-0827",
  "claude-3-haiku-20240307",
  "gpt-4o-mini-free",
  "claude-3-opus-20240229-gcp"
];
app.use(cors());
app.use(express.json());

const modelTimeout = 10000; // Timeout for each model request in ms

// Promise that resolves with the first model that responds successfully within the timeout
const getAIResponse = async (messages) => {
  return new Promise((resolve, reject) => {
    let resolved = false;

    models.forEach((model) => {
      // Set up individual model request with a timeout
      const timer = setTimeout(() => {
        if (!resolved) {
          console.log(`Model ${model} timed out.`);
        }
      }, modelTimeout);

      ai.generate(model, messages)
        .then(response => {
          if (!resolved) {
            resolved = true;
            clearTimeout(timer);
            resolve({ model, response });
          }
        })
        .catch(error => {
          clearTimeout(timer);
          console.error(`Error with model ${model}:`, error);
        });
    });

    // Fallback if no models respond
    setTimeout(() => {
      if (!resolved) {
        reject(new Error('All models failed or timed out.'));
      }
    }, modelTimeout * models.length);
  });
};

app.post('/generate', async (req, res) => {
  const userMessage = req.body.message;
  if (!userMessage) {
    return res.status(400).json({ success: false, error: 'Message is required' });
  }

  const messages = [{ role: 'user', content: userMessage }, { role: 'system', content: '' }];

  try {
    const { model, response } = await getAIResponse(messages);
    console.log(`Response generated by model: ${model}`);
    res.json({ success: true, model, response });
  } catch (error) {
    console.error('Error generating AI response:', error);
    res.status(500).json({ success: false, error: 'An error occurred or all models timed out' });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
